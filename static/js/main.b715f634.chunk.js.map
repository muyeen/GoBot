{"version":3,"sources":["components/navigator.jsx","components/bot.jsx","components/tile.jsx","components/board.jsx","App.js","serviceWorker.js","index.js"],"names":["navigator","state","className","onClick","props","onNavigatorClick","x","y","Component","bot","botImgUrl","botStyle","top","this","position","left","height","width","transitionDuration","botMovingTime","style","src","Tile","onTeleport","possition","board","tiles","map","tile","key","id","botPosition","App","rows","columns","componentDidMount","setState","handleBotMove","move","handleTeleport","destinationTile","getTileDistance","tile1","tile2","a","b","Math","sqrt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"sPAyCeA,E,2MAjCXC,MAAQ,G,wEACE,IAAD,OACL,OACI,yBAAKC,UAAU,aACX,6BACI,4BACAC,QAAS,kBAAM,EAAKC,MAAMC,iBAAiB,CAACC,EAAG,EAAGC,GAAI,KACtDL,UAAU,kBACT,kBAAC,IAAD,QAEL,6BACI,4BACAC,QAAS,kBAAM,EAAKC,MAAMC,iBAAiB,CAACC,GAAI,EAAGC,EAAG,KACtDL,UAAU,oBACT,kBAAC,IAAD,OAED,4BACAC,QAAS,kBAAM,EAAKC,MAAMC,iBAAiB,CAACC,EAAG,EAAGC,EAAG,KACrDL,UAAU,qBACT,kBAAC,IAAD,QAEL,6BACI,4BACAC,QAAS,kBAAM,EAAKC,MAAMC,iBAAiB,CAACC,EAAG,EAAGC,EAAG,KACrDL,UAAU,oBACT,kBAAC,IAAD,a,GA1BGM,aCgBTC,E,2MApBXR,MAAQ,CACJS,UAAW,W,wEAIX,IAAIC,EAAW,CACXC,IAA6B,GAAxBC,KAAKT,MAAMU,SAASP,EAAS,GAClCQ,KAA8B,IAAxBF,KAAKT,MAAMU,SAASR,EAAU,IACpCU,OAAQ,GACRC,MAAO,GACPC,mBAAoBL,KAAKT,MAAMe,cAAc,MAEjD,OACI,yBAAKC,MAAOT,EAAWT,UAAU,OAC7B,yBAAKA,UAAU,SAASmB,IAAKR,KAAKZ,MAAMS,iB,GAftCF,aCgBHc,E,iLAfD,IAAD,OAKL,OACI,0BACCpB,UAAU,OACVkB,MAPa,CACdJ,OAAQ,GACRC,MAAO,IAMNd,QAAS,kBAAM,EAAKC,MAAMmB,WAAW,EAAKnB,MAAMoB,kB,GAV1ChB,aC0BJiB,E,iLAtBA,IAAD,OAKN,OACI,yBAAKL,MALU,CACfJ,OAAQ,IACRC,MAAO,KAGiBf,UAAU,SAC9B,6BACCW,KAAKT,MAAMsB,MAAMC,KAAI,SAAAC,GAAI,OACtB,kBAAC,EAAD,CACAC,IAAKD,EAAKE,GACVN,UAAW,CAAClB,EAAGsB,EAAKtB,EAAGC,EAAGqB,EAAKrB,GAC/BgB,WAAY,EAAKnB,MAAMmB,iBAI3B,kBAAC,EAAD,CAAKT,SAAUD,KAAKT,MAAM2B,YAAaZ,cAAeN,KAAKT,MAAMe,qB,GAjB7DX,aCgGLwB,G,iNA7Fb/B,MAAQ,CACNgC,KAAM,EACNC,QAAS,EACTH,YAAa,CACXzB,EAAG,EACHC,EAAG,GAELY,cAAe,IACfO,MAAO,I,EAGTS,kBAAoB,WA6BlB,EAAKC,SAAS,CAACV,MA5BD,CACZ,CAAEI,GAAI,EAAGvB,EAAG,EAAGD,EAAG,GAClB,CAAEwB,GAAI,EAAGvB,EAAG,EAAGD,EAAG,GAClB,CAAEwB,GAAI,EAAGvB,EAAG,EAAGD,EAAG,GAClB,CAAEwB,GAAI,EAAGvB,EAAG,EAAGD,EAAG,GAClB,CAAEwB,GAAI,EAAGvB,EAAG,EAAGD,EAAG,GAClB,CAAEwB,GAAI,EAAGvB,EAAG,EAAGD,EAAG,GAClB,CAAEwB,GAAI,EAAGvB,EAAG,EAAGD,EAAG,GAClB,CAAEwB,GAAI,EAAGvB,EAAG,EAAGD,EAAG,GAClB,CAAEwB,GAAI,EAAGvB,EAAG,EAAGD,EAAG,GAClB,CAAEwB,GAAI,GAAIvB,EAAG,EAAGD,EAAG,GACnB,CAAEwB,GAAI,GAAIvB,EAAG,EAAGD,EAAG,GACnB,CAAEwB,GAAI,GAAIvB,EAAG,EAAGD,EAAG,GACnB,CAAEwB,GAAI,GAAIvB,EAAG,EAAGD,EAAG,GACnB,CAAEwB,GAAI,GAAIvB,EAAG,EAAGD,EAAG,GACnB,CAAEwB,GAAI,GAAIvB,EAAG,EAAGD,EAAG,GACnB,CAAEwB,GAAI,GAAIvB,EAAG,EAAGD,EAAG,GACnB,CAAEwB,GAAI,GAAIvB,EAAG,EAAGD,EAAG,GACnB,CAAEwB,GAAI,GAAIvB,EAAG,EAAGD,EAAG,GACnB,CAAEwB,GAAI,GAAIvB,EAAG,EAAGD,EAAG,GACnB,CAAEwB,GAAI,GAAIvB,EAAG,EAAGD,EAAG,GACnB,CAAEwB,GAAI,GAAIvB,EAAG,EAAGD,EAAG,GACnB,CAAEwB,GAAI,GAAIvB,EAAG,EAAGD,EAAG,GACnB,CAAEwB,GAAI,GAAIvB,EAAG,EAAGD,EAAG,GACnB,CAAEwB,GAAI,GAAIvB,EAAG,EAAGD,EAAG,GACnB,CAAEwB,GAAI,GAAIvB,EAAG,EAAGD,EAAG,O,EAMvB+B,cAAgB,SAACC,GACf,IAAMP,EAAc,CAClBzB,EAAG,EAAKL,MAAM8B,YAAYzB,EAAIgC,EAAKhC,EACnCC,EAAG,EAAKN,MAAM8B,YAAYxB,EAAI+B,EAAK/B,GAEjCwB,EAAYzB,GAAK,EAAKL,MAAMiC,SAAWH,EAAYzB,EAAI,GAAKyB,EAAYxB,GAAK,EAAKN,MAAMgC,MAAQF,EAAYxB,EAAI,GAClH,EAAK6B,SAAS,CAAEL,cAAaZ,cAAe,O,EAGhDoB,eAAiB,SAACC,GAKhB,IACMrB,EAA+B,IADhB,EAAKsB,gBAAgBD,EAAiB,EAAKvC,MAAM8B,aAEtE,EAAKK,SAAS,CAAEL,YAAcS,EAAiBrB,mB,EAGjDsB,gBAAkB,SAACC,EAAOC,GACxB,IAAMC,EAAIF,EAAMpC,EAAIqC,EAAMrC,EACpBuC,EAAIH,EAAMnC,EAAIoC,EAAMpC,EAG1B,OADiBuC,KAAKC,KAAMH,EAAIA,EAAIC,EAAIA,I,wEAIxC,OACE,yBAAK3C,UAAU,OACf,yBACAA,UAAU,cACR,kBAAC,EAAD,CACA+B,KAAMpB,KAAKZ,MAAMgC,KACjBC,QAASrB,KAAKZ,MAAMiC,QACpBR,MAAOb,KAAKZ,MAAMyB,MAClBK,YAAalB,KAAKZ,MAAM8B,YACxBR,WAAYV,KAAK0B,eACjBpB,cAAeN,KAAKZ,MAAMkB,iBAG5B,yBACEC,MAAO,CAACJ,OAAQ,KAChBd,UAAU,kBACV,kBAAC,EAAD,CAAWG,iBAAkBQ,KAAKwB,sB,GAvFxB7B,cCKEwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBxD,WACrBA,UAAUyD,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.b715f634.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { \r\n    FaChevronDown,\r\n    FaChevronLeft,\r\n    FaChevronRight,\r\n    FaChevronUp \r\n} from \"react-icons/fa\";\r\nclass navigator extends Component {\r\n    state = {  }\r\n    render() { \r\n        return ( \r\n            <div className=\"navigator\">\r\n                <div>\r\n                    <button \r\n                    onClick={() => this.props.onNavigatorClick({x: 0, y: -1})} \r\n                    className=\"btn goUpButton\"\r\n                    ><FaChevronUp /></button>\r\n                </div>\r\n                <div>\r\n                    <button \r\n                    onClick={() => this.props.onNavigatorClick({x: -1, y: 0})} \r\n                    className=\"btn goLeftButton\"\r\n                    ><FaChevronLeft /></button>\r\n\r\n                    <button \r\n                    onClick={() => this.props.onNavigatorClick({x: 1, y: 0})} \r\n                    className=\"btn goRightButton\"\r\n                    ><FaChevronRight /></button>\r\n                </div>\r\n                <div>\r\n                    <button \r\n                    onClick={() => this.props.onNavigatorClick({x: 0, y: 1})} \r\n                    className=\"btn goDownButton\"\r\n                    ><FaChevronDown /></button>\r\n                </div>\r\n                \r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default navigator;","import React, { Component } from 'react';\r\n\r\nclass bot extends Component {\r\n    state = { \r\n        botImgUrl: 'bot.png',\r\n      \r\n     }\r\n    render() { \r\n        let botStyle = {\r\n            top: this.props.position.y * 80 - 80,\r\n            left: this.props.position.x * 100 - 100,\r\n            height: 78,\r\n            width: 98,\r\n            transitionDuration: this.props.botMovingTime+'ms',\r\n        };\r\n        return ( \r\n            <div style={botStyle}  className=\"bot\"> \r\n                <img className=\"botImg\" src={this.state.botImgUrl}/>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default bot;","import React, { Component } from 'react';\r\n\r\nclass Tile extends Component {\r\n    render() { \r\n        const tileStyle = {\r\n            height: 78,\r\n            width: 98,\r\n        }\r\n        return ( \r\n            <span\r\n             className=\"tile\" \r\n             style={tileStyle}\r\n             onClick={() => this.props.onTeleport(this.props.possition)}\r\n             ></span>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Tile;","import React, { Component } from 'react';\r\n\r\nimport Bot from './bot';\r\nimport Tile from './tile';\r\n\r\nclass board extends Component {\r\n     render() { \r\n        const boardStyle = {\r\n            height: 80 * 5,\r\n            width: 100 * 5,\r\n        };\r\n        return ( \r\n            <div style={boardStyle} className=\"board\">\r\n                <div>\r\n                {this.props.tiles.map(tile => (\r\n                    <Tile \r\n                    key={tile.id} \r\n                    possition={{x: tile.x, y: tile.y}}\r\n                    onTeleport={this.props.onTeleport}\r\n                   />\r\n                ))}\r\n                </div>\r\n                <Bot position={this.props.botPosition} botMovingTime={this.props.botMovingTime}/>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default board;","import React, { Component } from 'react';\nimport './App.css';\n\nimport Navigator from './components/navigator';\nimport Board from './components/board';\nimport 'bootstrap/dist/css/bootstrap.css'\n\nclass App extends Component {\n  state = { \n    rows: 5,\n    columns: 5,\n    botPosition: {\n      x: 1, \n      y: 5\n    },\n    botMovingTime: 1000,\n    tiles: []\n  }\n\n  componentDidMount = () => {\n    const tiles = [\n      { id: 1, y: 1, x: 1 },\n      { id: 2, y: 1, x: 2 },\n      { id: 3, y: 1, x: 3 },\n      { id: 4, y: 1, x: 4 },\n      { id: 5, y: 1, x: 5 },\n      { id: 6, y: 2, x: 1 },\n      { id: 7, y: 2, x: 2 },\n      { id: 8, y: 2, x: 3 },\n      { id: 9, y: 2, x: 4 },\n      { id: 10, y: 2, x: 5 },\n      { id: 11, y: 3, x: 1 },\n      { id: 12, y: 3, x: 2 },\n      { id: 13, y: 3, x: 3 },\n      { id: 14, y: 3, x: 4 },\n      { id: 15, y: 3, x: 5 },\n      { id: 16, y: 4, x: 1 },\n      { id: 17, y: 4, x: 2 },\n      { id: 18, y: 4, x: 3 },\n      { id: 19, y: 4, x: 4 },\n      { id: 20, y: 4, x: 5 },\n      { id: 21, y: 5, x: 1 },\n      { id: 22, y: 5, x: 2 },\n      { id: 23, y: 5, x: 3 },\n      { id: 24, y: 5, x: 4 },\n      { id: 25, y: 5, x: 5 },\n    ];\n\n    this.setState({tiles})\n  }\n\n  handleBotMove = (move) => {\n    const botPosition = { \n      x: this.state.botPosition.x + move.x,\n      y: this.state.botPosition.y + move.y\n    }\n    if (botPosition.x <= this.state.columns && botPosition.x > 0 && botPosition.y <= this.state.rows && botPosition.y > 0)\n      this.setState({ botPosition, botMovingTime: 1000 })\n  }\n\n  handleTeleport = (destinationTile) => {\n    // const a = destinationTile.x - this.state.botPosition.x;\n    // const b = destinationTile.y - this.state.botPosition.y;\n\n    // const botMovingTime = Math.sqrt( a * a + b * b ) * 1000;\n    const tileDistance = this.getTileDistance(destinationTile, this.state.botPosition);\n    const botMovingTime = tileDistance * 1000;\n    this.setState({ botPosition : destinationTile, botMovingTime })\n  }\n  \n  getTileDistance = (tile1, tile2) => {\n    const a = tile1.x - tile2.x;\n    const b = tile1.y - tile2.y;\n\n    const distance = Math.sqrt( a * a + b * b ) ;\n    return distance;\n  }\n  render() { \n    return ( \n      <div className=\"App\">\n      <div \n      className=\"board-wrap\">\n        <Board \n        rows={this.state.rows} \n        columns={this.state.columns} \n        tiles={this.state.tiles}\n        botPosition={this.state.botPosition}\n        onTeleport={this.handleTeleport}\n        botMovingTime={this.state.botMovingTime}\n        />\n      </div>\n      <div \n        style={{height: 80 * 5,}}\n        className=\"navigator-wrap\">\n        <Navigator onNavigatorClick={this.handleBotMove}/>\n      </div>\n    </div>\n     );\n  }\n}\n \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}